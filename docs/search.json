[{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"jackbibby1.github.io/SCPA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"jackbibby1.github.io/SCPA/articles/comparing_two_populations.html","id":"loading-in-data-and-visualizing","dir":"Articles","previous_headings":"","what":"Loading in data and visualizing","title":"Comparing two populations","text":"let’s load data ’re going use. dataset, CD4+ T cells left unstimulated, stimuated 12 24 hours anti-CD3 anti-CD28 naive_cd4 object, naive CD4+ T cells metadata specifying identified cell types hour specifying time point cell harvesting.","code":"naive_cd4 <- load(\"naive_cd4.rds\") DimPlot(naive_cd4, split.by = \"Hour\") +   theme(aspect.ratio = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/comparing_two_populations.html","id":"extracting-the-expression-matrices","dir":"Articles","previous_headings":"","what":"Extracting the expression matrices","title":"Comparing two populations","text":"need expression matrices populations want compare. , can use seurat_extract function SCPA package, takes Seurat object subsets data based metadata specified Seurat columns e.g. want take ‘Resting’ cells 0hr, ‘Activated’ cells 24hr.","code":"resting <- seurat_extract(naive_cd4,                           meta1 = \"Cell_Type\", value_meta1 = \"Resting\",                           meta2 = \"Hour\", value_meta2 = 0)  activated <- seurat_extract(naive_cd4,                             meta1 = \"Cell_Type\", value_meta1 = \"Activated\",                             meta2 = \"Hour\", value_meta2 = 24)"},{"path":"jackbibby1.github.io/SCPA/articles/comparing_two_populations.html","id":"defining-metabolic-pathways","dir":"Articles","previous_headings":"","what":"Defining metabolic pathways","title":"Comparing two populations","text":"data, can define pathways compare. curated list metabolic pathways different sources (Hallmark, KEGG, Reactome), can found . file standard gmt file format pathway name column 1 genes pathway subsequent columns. just converted gmt file csv, manually curated single file metabolic gene sets. SCPA just needs filepath gene sets, can add object simplify final chunk code","code":"pathways <- \"combined_metabolic_pathways.csv\""},{"path":"jackbibby1.github.io/SCPA/articles/comparing_two_populations.html","id":"running-scpa","dir":"Articles","previous_headings":"","what":"Running SCPA","title":"Comparing two populations","text":"now samples metabolic gene sets. compare pathways, can just run compare_pathways function.","code":"rest_act <- compare_pathways(samples = list(resting, activated),                               pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/comparing_two_populations.html","id":"visualizing-results","dir":"Articles","previous_headings":"","what":"Visualizing results","title":"Comparing two populations","text":"Now results stored rest_act object, can visualize.  important aspect SCPA highlighted , pathways showing large changes multivariate distribution (.e. pathway ‘activity’) always show mean changes. looking plot, see large number pathways high qvals, enrichment given population. plot highlight arachidonic acid one particular pathway shows pattern, wet lab work, shown pathways also relevant understanding pathway importance. suggest qval used primary statistic judging biological relevance, pathway fold change/enirchment secondary informative value.","code":"rest_act <- rest_act %>%   mutate(color = case_when(FC > 5 & adjPval < 0.01 ~ '#6dbf88',                            FC < 5 & FC > -5 & adjPval < 0.01 ~ '#84b0f0',                            FC < -5 & adjPval < 0.01 ~ 'seagreen2',                            FC < 5 & FC > -5 & adjPval > 0.01 ~ 'black'))  aa_path <- rest_act %>%    filter(grepl(pattern = \"reactomeome_arachi\", ignore.case = T, x = Pathway))  ggplot(rest_act, aes(FC, qval)) +   geom_vline(xintercept = c(-5, 5), linetype = \"dashed\", col = 'black', lwd = 0.3) +   geom_point(cex = 2.6, shape = 21, fill = rest_act$color, stroke = 0.3) +   geom_point(data = aa_path, shape = 21, cex = 2.8, fill = \"orangered2\", color = \"black\", stroke = 0.3) +   xlim(-20, 80) +   ylim(0, 11) +   xlab(\"Enrichment\") +   ylab(\"Qval\") +   theme(panel.background = element_blank(),         panel.border = element_rect(fill = NA),         aspect.ratio = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/disease_comparison.html","id":"loading-in-datapackages","dir":"Articles","previous_headings":"","what":"Loading in data/packages","title":"Systems level pathway analysis in disease","text":"Let’s load packages load dataset Wilk, …Blish, C creates single cell atlas peripheral blood immune cells COVID-19 patients. Let’s quick look data, get rid cell populations aren’t represented healthy disease datasets.","code":"library(SCPA) library(Seurat) library(tidyverse) library(ComplexHeatmap) library(circlize) blood_atlas <- readRDS(\"covid_blood_atlas.rds\") Idents(blood_atlas) <- blood_atlas$cell.type DimPlot(blood_atlas, label = T, group.by = \"cell.type.fine\", split.by = \"Status\") +   theme(aspect.ratio = 1) idents <- c(\"Class-switched B\", \"IgG PB\", \"IgA PB\", \"CD14 Monocyte\", \"CD8m T\",             \"CD4m T\", \"CD4n T\", \"B\", \"NK\", \"Neutrophil\", \"CD16 Monocyte\", \"gd T\",             \"pDC\", \"SC & Eosinophil\", \"DC\") blish_sub <- subset(blish, idents = idents)"},{"path":"jackbibby1.github.io/SCPA/articles/disease_comparison.html","id":"preparing-data-for-comparison","dir":"Articles","previous_headings":"","what":"Preparing data for comparison","title":"Systems level pathway analysis in disease","text":"Now can pull pathways want compare. , ’re using csv file contains combination canonical pathways, gene ontology pathways, regulatory pathways MSigDB, can find file . let’s create object cell types want compare, split object disease status.","code":"pathways <- \"h_k_r_go_pid_reg_wik.csv\" cell_types <- unique(blood_atlas$cell.type.fine) blood_atlas <- SplitObject(blood_atlas, split.by = \"Status\")"},{"path":"jackbibby1.github.io/SCPA/articles/disease_comparison.html","id":"scpa-comparison","dir":"Articles","previous_headings":"","what":"SCPA comparison","title":"Systems level pathway analysis in disease","text":"Now ’ve formatted everything properly, just need loop SCPA cell types dataset. ’re using seurat_extract pull expression matrices cell type, using input compare_pathways. ’re using load pathways cell types , may take . ’re also just going keep Pathway qval variables comparison, add cell type column names, can keep track qvals cell type.","code":"scpa_out <- list() for (i in cell_types) {      healthy <- seurat_extract(blood_atlas$Healthy,                              meta1 = \"cell.type.fine\", value_meta1 = i)      covid <- seurat_extract(blood_atlas$COVID,                            meta1 = \"cell.type.fine\", value_meta1 = i)      print(paste(\"comparing\", i))   scpa_out[[i]] <- compare_pathways(list(healthy, covid), pathways) %>%     select(Pathway, qval) %>%     set_colnames(c(\"Pathway\", paste(i, \"qval\", sep = \"_\")))    }"},{"path":"jackbibby1.github.io/SCPA/articles/disease_comparison.html","id":"plotting-the-output","dir":"Articles","previous_headings":"","what":"Plotting the output","title":"Systems level pathway analysis in disease","text":"Let’s combine results cell types, just take pathways qval > 2 comparison can take pathways want highlight final plot create row annotations heatmap highlight pathways, color scale  Now results, can plot heatmap qvals get idea broad patterns. Interestingly, see large dysregulation pathways CD14+ monocytes peripheral blood COVID-19 patients, suggesting cell show greatest deviation CD14+ monocytes healthy donors. pathways include well defined immunologcal signatures response viral infection, including interferon response pathways, complement cascades. ’ve just chosen highlight heatmap .","code":"scpa_out <- scpa_out %>%    reduce(full_join, by = \"Pathway\") %>%    set_colnames(gsub(colnames(.), pattern = \" \", replacement = \"_\")) %>%   select(c(\"Pathway\", grep(\"_qval\", colnames(.)))) %>%   filter_all(any_vars(. > 2)) %>%   column_to_rownames(\"Pathway\") blood_paths <- c(\"HALLMARK_TNFA_SIGNALING_VIA_NFKB\", \"HALLMARK_INFLAMMATORY_RESPONSE\",                  \"HALLMARK_COMPLEMENT\", \"HALLMARK_IL6_JAK_STAT3_SIGNALING\",                  \"HALLMARK_IL2_STAT5_SIGNALING\", \"HALLMARK_INTERFERON_GAMMA_RESPONSE\",                  \"HALLMARK_MTORC1_SIGNALING\", \"HALLMARK_INTERFERON_ALPHA_RESPONSE\",                  \"HALLMARK_MYC_TARGETS_V1\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\") position <- which(rownames(scpa_out) %in% blood_paths) row_an <- rowAnnotation(Genes = anno_mark(at = which(rownames(scpa_out) %in% blood_paths),                                           labels = rownames(scpa_out)[position],                                           labels_gp = gpar(fontsize = 7),                                           link_width = unit(2.5, \"mm\"),                                           padding = unit(1, \"mm\"),                                           link_gp = gpar(lwd = 0.5))) col_hm <- colorRamp2(colors = c(\"blue\", \"white\", \"red\"), breaks = c(0, 3, 6)) Heatmap(scpa_out,         col = col_hm,         name = \"Qval\",         show_row_names = F,         #right_annotation = row_an,         column_names_gp = gpar(fontsize = 8),         border = T,         column_km = 3,         row_km = 3,         column_labels = c(\"CS B\", \"IgG B\", \"IgA B\", \"CD14 Mono\", \"mCD8 T\", \"mCD4 T\",                           \"nCD4 T\", \"B\", \"NK\", \"Neut\", \"CD16 Mono\", \"gdT\", \"pDC\", \"Eosin\", \"DC\"))"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"comparing-pathways-across-pseudotime-with-scpa","dir":"Articles","previous_headings":"","what":"Comparing pathways across pseudotime with SCPA","title":"Comparing pathways over pseudotime","text":"’re going look tracking gene set changes across pseudotime trajectory, using multisample capability SCPA. , ’ll use dataset generated naive CD4+ T cells left unstimulated, stimuated 12 24 hours anti-CD3 anti-CD28. can find dataset . ’ll systematic analysis metabolic pathways transcriptionally regulated throughout naive CD4+ T cell activation. Let’s load packages start","code":"library(SCPA) library(Seurat) library(tidyverse) library(magrittr) library(dyno) library(ComplexHeatmap) library(circlize)"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"load-in-data","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Load in data","title":"Comparing pathways over pseudotime","text":"","code":"naive_cd4 <- load(\"naive_cd4.rds\")"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"quick-look-at-the-data","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Quick look at the data","title":"Comparing pathways over pseudotime","text":"can see populations include naive/activated T cells, Tregs","code":"DimPlot(naive_cd4, split.by = \"Hour\")"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"filter-out-cells-we-dont-want","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Filter out cells we don’t want","title":"Comparing pathways over pseudotime","text":"’ll get rid Tregs ’re just interested naive T cell activation non Treg populations","code":"naive_cd4 <- subset(naive_cd4, idents = \"Treg\", invert = T)"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"model-trajectory-using-the-dyno-workflow","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Model trajectory using the dyno workflow","title":"Comparing pathways over pseudotime","text":"’ll take top 1000 variable genes model trajectory steps broadly taken dyno vignettes. ’re just taking expression data adding object ’s able used infer_trajectory function. finally running infer_trajectory function using slingshot modeller can visualise trajectory  trajectory calculated, can generate distinct nodes cells across trajectory use input SCPA. generate nodes, can use group_onto_nearest_milestones function, assigns cell node based ’s pseudotime value. can visualize nodes calculated across trajectory see ’re extracting","code":"df <- as.matrix(naive_cd4[[\"RNA\"]]@data) var_genes <- names(sort(apply(df, 1, var), decreasing = TRUE))[1:1000] counts <- Matrix::t(as(as.matrix(naive_cd4@assays$RNA@counts[var_genes,]), 'sparseMatrix')) expression <- Matrix::t(as(as.matrix(naive_cd4@assays$RNA@data[var_genes,]), 'sparseMatrix'))  dataset_n4 <- wrap_expression(expression = expression,                               counts = counts) model_n4 <- infer_trajectory(dataset_n4, method = ti_slingshot(), verbose = T) plot_dimred(model_n4,              \"pseudotime\",              pseudotime = calculate_pseudotime(model_n4),              hex_cells = F,             plot_trajectory = T,              size_cells = 1, alpha_cells = 0.8) +    theme(aspect.ratio = 1) plot_dimred(model_n4,              grouping = group_onto_nearest_milestones(model_n4),              hex_cells = F,             plot_trajectory = T,              size_cells = 1, alpha_cells = 0.8) +    theme(aspect.ratio = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"extract-groups-based-on-milestones-and-add-information-to-seurat-object","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Extract groups based on milestones and add information to Seurat object","title":"Comparing pathways over pseudotime","text":"extract cells based grouping pseudotime groupings, can add information Seurat object.","code":"mile_group <- data.frame(group_onto_nearest_milestones(model_n4)) %>%   set_colnames(\"milestone\") %>%   rownames_to_column(\"cell\") naive_cd4$milestone <- mile_group$milestone"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"extract-expression-data-for-the-populations-were-comparing","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Extract expression data for the populations we’re comparing","title":"Comparing pathways over pseudotime","text":"need extract expression matrices cells across distinct nodes, effectively 4 populations across trajectory. can use expression matrices assess pathways across 4 nodes. can loop seurat_extract function get expression matrices cells population.","code":"cd4_pseudo <- list() for (i in 1:max(mile_group$milestone)) {   cd4_pseudo[[i]] <- seurat_extract(naive_cd4, meta1 = \"milestone\", value_meta1 = i) }"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"define-pathways-and-run-comparison","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Define pathways and run comparison","title":"Comparing pathways over pseudotime","text":"Now hard work done, just need give information SCPA analyse pathways pseudotime, defining pathways. ’re using curated list metabolic pathways taken Hallmark, KEGG, Reactome databases can find ","code":"pathways <- \"combined_metabolic_pathways.csv\"  cd4_metabolism <- compare_pathways(samples = cd4_pseudo,                                     pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"plot-a-global-summary-of-the-data","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Plot a global summary of the data","title":"Comparing pathways over pseudotime","text":"done. Let’s plot data (annotations added later highlight pathways)","code":"cd4_metabolism <- cd4_metabolism %>%   data.frame() %>%   select(Pathway, qval) %>%   column_to_rownames(\"Pathway\")  col_hm <- colorRamp2(colors = c(\"white\", \"red\"), breaks = c(0, max(mstone_out)))  Heatmap(t(cd4_metabolism),         name = \"Qvalue\",         col = col_hm,         border = T,         rect_gp = gpar(col = \"white\", lwd = 0.1),         heatmap_height = unit(2, \"cm\"),         show_column_dend = F,         show_row_names = F,         show_column_names = F)"},{"path":"jackbibby1.github.io/SCPA/articles/pseudotime.html","id":"highlight-pathway-by-rank","dir":"Articles","previous_headings":"Comparing pathways across pseudotime with SCPA","what":"Highlight pathway by rank","title":"Comparing pathways over pseudotime","text":"can also extract single pathway highlight rank analysis using plot_rank function. lots glycolysis pathways near top list, ’ll just highlight one.","code":"plot_rank(scpa_out = cd4_metabolism,            pathway = \"hallmark_gly\",           base_point_size = 2.5,           highlight_point_size = 3)"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"broad-overview-of-the-workflow","dir":"Articles","previous_headings":"","what":"1. Broad overview of the workflow","title":"Quick Start","text":"","code":"pathways <- msigdbr(\"Homo sapiens\") %>%   format_pathways()  # The populations here just need to be your normalized expression matrices  scpa_out <- compare_pathways(samples = list(population1, population2),                              pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"full-workflow-on-an-example-dataset","dir":"Articles","previous_headings":"","what":"2. Full workflow on an example dataset","title":"Quick Start","text":"’re just going show general principles need get started basic pathway analysis. acts quick reference main points workflow, detailed examples can found tutorials","code":""},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"basic-information-needed-for-pathway-analysis","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Basic information needed for pathway analysis","title":"Quick Start","text":"two main bits information need : Expression matrix condition (can formatted separate data frames/matrices, stored within typical Seurat object) Gene sets","code":""},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"loading-in-packages","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Loading in packages","title":"Quick Start","text":"simple example, ’re going load packages. msigdbr allows access large number gene sets collated ","code":"library(SCPA) library(msigdbr) library(Seurat) library(dplyr) library(ggplot2)"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"loading-in-data","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Loading in data","title":"Quick Start","text":"’re going use subset data taken Szabo, P… Sims, P paper. can find data R object ","code":"t_cells <- readRDS(\"szabo_t_cell.rds\")"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"quick-look-at-the-data","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Quick Look at the data","title":"Quick Start","text":"","code":"DimPlot(t_cells) +   theme(aspect.ratio = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"generating-samples-from-a-seurat-object","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Generating samples from a Seurat object","title":"Quick Start","text":"basic comparison, ’re going look T helper 1 (Th1) T central memory (Tcm) cells. generate expression matrices SCPA can use, can run seurat_extract function. takes Seurat object input, subsets data based Seurat column metadata, returns expression file given subset.","code":"tcm <- seurat_extract(t_cells,                       meta1 = \"Cell\", value_meta1 = \"cd4 tcm\") th1 <- seurat_extract(t_cells,                       meta1 = \"Cell\", value_meta1 = \"cd4 th1\")"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"generate-some-gene-sets-using-msigdbr","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Generate some gene sets using msigdbr","title":"Quick Start","text":"need generate gene sets. msigdbr handy package allows get information. ’re pulling Hallmark pathways, using format_pathways function within SPCA get properly formatted. detailed explanation generating gene sets SCPA can found ","code":"pathways <- msigdbr::msigdbr(\"Homo sapiens\", \"H\") %>%   format_pathways()"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"comparing-samples","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Comparing samples","title":"Quick Start","text":"’re set. now everything need compare two populations. just run compare_pathways use objects created . scpa_out, results.","code":"scpa_out <- compare_pathways(samples = list(tcm, th1),                               pathways = pathways) head(scpa_out, 5) #>                               Pathway          Pval       adjPval      qval #> 31          HALLMARK_MTORC1_SIGNALING 2.629300e-104 1.314650e-102 10.093621 #> 2        HALLMARK_ALLOGRAFT_REJECTION 1.253504e-102 6.267519e-101 10.010140 #> 32            HALLMARK_MYC_TARGETS_V1 5.788383e-101  2.894192e-99  9.926655 #> 36 HALLMARK_OXIDATIVE_PHOSPHORYLATION 5.788383e-101  2.894192e-99  9.926655 #> 13               HALLMARK_E2F_TARGETS  1.121660e-97  5.608299e-96  9.759671 #>          FC #> 31 50.79632 #> 2  23.91553 #> 32 90.87779 #> 36 55.84866 #> 13 35.16508"},{"path":"jackbibby1.github.io/SCPA/articles/quick_start.html","id":"plotting-some-basic-output","dir":"Articles","previous_headings":"2. Full workflow on an example dataset","what":"Plotting some basic output","title":"Quick Start","text":"can use SCPA generate pathway rank plot. example, can highlight topmost MTORC1 pathway using plot_rank function.","code":"plot_rank(scpa_out = scpa_out,            pathway = \"MTORC1\",            base_point_size = 2,            highlight_point_size = 3)"},{"path":"jackbibby1.github.io/SCPA/articles/seurat_comparison.html","id":"getting-the-dataset","dir":"Articles","previous_headings":"","what":"Getting the dataset","title":"Comparison within Seurat object","text":"’re going comparison Th1 Tcm cells quick start tutorial, using Hallmark gene sets. ’ll use Szabo, P… Sims, P T cell dataset can download .","code":"t_cells <- readRDS(\"~/Google Drive/example_datasets/szabo_t_cell.rds\")"},{"path":"jackbibby1.github.io/SCPA/articles/seurat_comparison.html","id":"quick-look-at-the-data","dir":"Articles","previous_headings":"","what":"Quick Look at the data","title":"Comparison within Seurat object","text":"","code":"DimPlot(t_cells) +   theme(aspect.ratio = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/seurat_comparison.html","id":"getting-the-gene-sets","dir":"Articles","previous_headings":"","what":"Getting the gene sets","title":"Comparison within Seurat object","text":"need define gene sets, can msigdbr package contains bunch biological gene sets can found . just take Hallmark gene sets (using “H” call msigdbr), use format_pathways function get readable format SCPA.","code":"pathways <- msigdbr(\"Homo sapiens\", \"H\") %>%   format_pathways()"},{"path":"jackbibby1.github.io/SCPA/articles/seurat_comparison.html","id":"scpa-comparison","dir":"Articles","previous_headings":"","what":"SCPA comparison","title":"Comparison within Seurat object","text":"Now compare Th1 Tcm populations, can use compare_seurat function within SCPA. , group1 defines column name metadata, group1_population defines two values within column ’s . results stored scpa_out object.","code":"scpa_out <- compare_seurat(t_cells,                            group1 = \"Cell\",                             group1_population = c(\"cd4 th1\", \"cd4 tcm\"),                            pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"loading-in-packages-and-data","dir":"Articles","previous_headings":"","what":"Loading in packages and data","title":"Systems level tissue comarison","text":"first let’s load packages load dataset. see processed integrated datasets generate file, can see script .","code":"library(SCPA) library(Seurat) library(msigdbr) library(magrittr) library(ComplexHeatmap) tissue_data <- readRDS(\"t_cell_tissue_data.rds\")"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"quick-look-at-the-data","dir":"Articles","previous_headings":"","what":"Quick look at the data","title":"Systems level tissue comarison","text":"Let’s quick look data","code":"DimPlot(tissue_data, split.by = \"tis_stim\", ncol = 4, group.by = \"fine\")"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"defining-gene-sets-to-analyze","dir":"Articles","previous_headings":"","what":"Defining gene sets to analyze","title":"Systems level tissue comarison","text":"Now ’re going define pathways want use. analysis ’re going use bunch different gene sets include many canonical pathways listed MSigDB website. total, list contains around 3000 pathways.","code":"pws <- c(\"kegg\", \"reactome\", \"biocarta\", \"wiki\", \"pid\") pathways <- msigdbr(\"Homo sapiens\") %>%   filter(grepl(paste(pws, collapse = \"|\"), gs_subcat, ignore.case = T) |            grepl(\"HALLMARK\", x = gs_name, ignore.case = T)) %>%   format_pathways()"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"small-bit-of-data-prep","dir":"Articles","previous_headings":"","what":"Small bit of data prep","title":"Systems level tissue comarison","text":"analysis want keep blood T cells reference, understand happens T cells migrate respective tissues; either bone marrow, lymph node, lung. First need define cell types want analyse. ’re going compare every cell type across tissues, can just pull metadata Seurat object. ’re also going split Seurat object tissue make comparisons easier. make list Seurat objects split tissue site","code":"cell_types <- unique(tissue_data$fine) split_tissue <- SplitObject(tissue_data, split.by = \"tissue\")"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"pathway-analysis-across-tissues","dir":"Articles","previous_headings":"","what":"Pathway analysis across tissues","title":"Systems level tissue comarison","text":"Now just need create loop cycle cell types tissue extract expression values, pathway analysis. Just break bit: first create empty lists store results loop extract expression data using seurat_extract based tissue, cell_type (“fine”), stimulation (“none”) compare tissues blood using compare_pathways Given number cells, pathways, samples ’re comparing, may take . ’re showing run comparison sequentially, can significantly reduce time taken analysis split three comparisons across e.g. different scripts.","code":"bl_bm <- list(); bl_ln <- list(); bl_lung <- list() for (i in cell_types) {      blood <- seurat_extract(split_tissue$bl,                            meta1 = \"fine\", value_meta1 = i,                           meta2 = \"stimulation\", value_meta2 = \"none\")      bm <- seurat_extract(split_tissue$bm,                         meta1 = \"fine\", value_meta1 = i,                        meta2 = \"stimulation\", value_meta2 = \"none\")      ln <- seurat_extract(split_tissue$ln,                         meta1 = \"fine\", value_meta1 = i,                        meta2 = \"stimulation\", value_meta2 = \"none\")      lung <- seurat_extract(split_tissue$lung,                           meta1 = \"fine\", value_meta1 = i,                          meta2 = \"stimulation\", value_meta2 = \"none\")      print(paste(\"comparing\", i))   bl_bm[[i]] <- compare_pathways(list(blood, bm), pathways)   bl_ln[[i]] <- compare_pathways(list(blood, ln), pathways)   bl_lung[[i]] <- compare_pathways(list(blood, lung), pathways)    }"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"extracting-all-the-useful-information-for-plotting","dir":"Articles","previous_headings":"","what":"Extracting all the useful information for plotting","title":"Systems level tissue comarison","text":"’s – results. showed unstimulated analysis, comparison, changing meta2 = \"stimulation\", value_meta2 = \"none\" meta2 = \"stimulation\", value_meta2 = \"stim\" get pathway analysis done stimulated cells. Now just need extract results sensible way plot data. extraction, can something like , extracts pathway name qval comparison, assigns column name adds tissue cell type comparison column name now can use function format comparisons single data frame ’re just combining unstimulated stimulated conditions, extracting information column names used heatmap. ’re also defining heatmap annotation add tiles heatmap.","code":"get_qvals <- function(scpa_out, name) {      df <- list()   for (i in names(scpa_out)) {     df[[i]] <- scpa_out[[i]] %>%       select(Pathway, qval)   }      col_names <- names(df)   for (i in 1:length(df)) {     df[[i]] <- set_colnames(df[[i]], c(\"pathway\", paste(name, col_names[[i]], sep = \"_\")))   }      return(df)    } scpa_results <- Reduce(full_join, c(get_qvals(bl_bm, \"bm\"),                                     get_qvals(bl_ln, \"ln\"),                                     get_qvals(bl_lung, \"lung\"))) pway_rest <- pway_rest %>%    column_to_rownames(\"pathway\") %>%    set_colnames(paste(\"rest\", colnames(.), sep = \"_\")) %>%    rownames_to_column(\"pathway\")  pway_act <- pway_act %>%    column_to_rownames(\"pathway\") %>%    set_colnames(paste(\"stim\", colnames(.), sep = \"_\")) %>%    rownames_to_column(\"pathway\")  all_data <- full_join(pway_rest, pway_act, \"pathway\") %>%   column_to_rownames(\"pathway\")  stim <- all_data %>%   colnames() %>%   substr(1, 4) %>%   str_to_sentence()  tissue <- colnames(all_data) %>%   substr(6, 9) %>%   sub(pattern = \"_[a-z]\", replacement = \"\") %>%   gsub(pattern = \"bm\", replacement = \"BM\") %>%   gsub(pattern = \"ln\", replacement = \"LN\") %>%   gsub(pattern = \"lung\", replacement = \"Lung\")  lineage <- colnames(all_data) %>%   str_extract(pattern = \"cd[48]\") %>%   str_to_upper() %>%   replace_na(\"CD4\")  col_an <- HeatmapAnnotation(Stimulation = stim,                             Tissue = tissue,                             Lineage = lineage,                             col = list(Stimulation = c(\"Rest\" = \"gray70\", \"Stim\" = \"orangered2\"),                                        Tissue = c(\"BM\" = \"#cccccc\", \"LN\" = \"#be83e6\", \"Lung\" = \"#84c476\"),                                        Lineage = c(\"CD4\" = \"#4589ff\", \"CD8\" = \"#ff6363\")),                             gp = gpar(col = \"white\", lwd = 0.05),                             annotation_name_gp = gpar(fontsize = 9),                             simple_anno_size = unit(3, \"mm\"))"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"plotting-a-global-summary-of-the-data","dir":"Articles","previous_headings":"","what":"Plotting a global summary of the data","title":"Systems level tissue comarison","text":"can now plot broad summary using qvals comparison. , ’re just going represent data heatmap, using great ComplexHeatmap package.","code":"hm <- all_data %>%   Heatmap(name = \"Qval\",           show_row_names = F,            top_annotation = col_an,           border = T,           show_row_dend = F,           show_column_dend = F,           show_column_names = F)  ht <- draw(hm)"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"finding-something-a-bit-more-specific","dir":"Articles","previous_headings":"","what":"Finding something a bit more specific","title":"Systems level tissue comarison","text":"obviously now want use data find something bit biologically relevant. One way see pathways tissue specific. , calculated variable pathways across comparisons, plotted variance pathway (pathway names added later). can see signatures antimicrobial peptide production prostaglandin synthesis highly variable across conditions.","code":"apply(all_data, 1, var) %>%   data.frame() %>%    set_colnames(\"variation\") %>%   arrange(desc(variation)) %>%    rownames_to_column(\"pathway\") %>%   ggplot(aes(reorder(pathway, variation), variation)) +   geom_point(shape = 21, cex = 3, fill = \"royalblue2\", color = 'black', stroke = 0.2) +   scale_x_discrete(expand = c(0.04, 0.04)) +   labs(x = \"Pathway\", y = \"Variance\") +   theme(axis.text.x = element_blank(),         axis.ticks.x = element_blank(),         panel.background = element_blank(),         panel.border = element_rect(fill = NA))"},{"path":"jackbibby1.github.io/SCPA/articles/systematic_tissue_comparison.html","id":"highlighting-genes-from-the-antimicrobial-pathway","dir":"Articles","previous_headings":"","what":"Highlighting genes from the antimicrobial pathway","title":"Systems level tissue comarison","text":"going back pathway gene expression, can see large effect pathway signature driven expression alpha defensin proteins, exclusively T cells bone marrow.","code":"tissue_data$neat <- case_when(tissue_data$tissue == \"bl\" ~ \"Blood\",                               tissue_data$tissue == \"bm\" ~ \"BM\",                               tissue_data$tissue == \"lung\" ~ \"Lung\",                               tissue_data$tissue == \"ln\" ~ \"LN\")  plots <- VlnPlot(df, c(\"DEFA1\", \"DEFA3\"), pt.size = 0, group.by = \"neat\", ncol = 1, combine = F)  p1 <- VlnPlot(df, \"DEFA1\", pt.size = 0, group.by = \"neat\", ncol = 1) +   theme(axis.text.x = element_blank(),         axis.title.x = element_blank(),         plot.title = element_blank()) +    NoLegend() +   ylab(\"Log1p\")  p2 <- VlnPlot(df, \"DEFA3\", pt.size = 0, group.by = \"neat\", ncol = 1) +   theme(axis.title.x = element_blank(),         plot.title = element_blank()) +    NoLegend() +   ylab(\"Log1p\")  patchwork::wrap_plots(p1, p2, ncol = 1)"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"using-gene-sets-in-scpa","dir":"Articles","previous_headings":"","what":"Using gene sets in SCPA","title":"Generating gene sets","text":"different formats gene sets can use SCPA Generate gene set lists R (possibly best option) Use classical gene set gmt file Use csv file ’ll outline basic workflow get gene sets using either methods. First let’s load couple packages ’ll need","code":"library(SCPA) library(msigdbr)"},{"path":[]},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"generic-example","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"Generic example","title":"Generating gene sets","text":"simple example, can generate formatted gene sets using two simple lines code. ’ll just extract Hallmark pathways msigdbr","code":"pathways <- msigdbr(species = \"Homo sapiens\", category = \"H\") %>%       format_pathways()"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"more-detailed-example","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"More detailed example","title":"Generating gene sets","text":"msigdbr handy R package contains large number pathways. can see detailed explanation use different aspects package msigdbr vignette. ’re going use generate lists gene sets want analyse data using SCPA. example, can generate data frame containing Homo sapiens Hallmark gene sets using “H” call within msigdbr. data tidy format pathway names gs_name category, gene names gene_symbol category can look pathways really need pathway name gene symbol though. SCPA, also need formatted separate lists pathway. can easily using format_pathways function within SCPA result list pathways genes pathway. can see just look first element pathway list Now ’ve generated pathways can analysed directly compare_pathways function SCPA","code":"hallmark <- msigdbr(\"Homo sapiens\", \"H\") head(hallmark) #> # A tibble: 6 × 15 #>   gs_cat gs_subcat gs_name gene_symbol entrez_gene ensembl_gene human_gene_symb… #>   <chr>  <chr>     <chr>   <chr>             <int> <chr>        <chr>            #> 1 H      \"\"        HALLMA… ABCA1                19 ENSG0000016… ABCA1            #> 2 H      \"\"        HALLMA… ABCB8             11194 ENSG0000019… ABCB8            #> 3 H      \"\"        HALLMA… ACAA2             10449 ENSG0000016… ACAA2            #> 4 H      \"\"        HALLMA… ACADL                33 ENSG0000011… ACADL            #> 5 H      \"\"        HALLMA… ACADM                34 ENSG0000011… ACADM            #> 6 H      \"\"        HALLMA… ACADS                35 ENSG0000012… ACADS            #> # … with 8 more variables: human_entrez_gene <int>, human_ensembl_gene <chr>, #> #   gs_id <chr>, gs_pmid <chr>, gs_geoid <chr>, gs_exact_source <chr>, #> #   gs_url <chr>, gs_description <chr> hallmark$gs_name %>%    unique() %>%   head(10) #>  [1] \"HALLMARK_ADIPOGENESIS\"            \"HALLMARK_ALLOGRAFT_REJECTION\"     #>  [3] \"HALLMARK_ANDROGEN_RESPONSE\"       \"HALLMARK_ANGIOGENESIS\"            #>  [5] \"HALLMARK_APICAL_JUNCTION\"         \"HALLMARK_APICAL_SURFACE\"          #>  [7] \"HALLMARK_APOPTOSIS\"               \"HALLMARK_BILE_ACID_METABOLISM\"    #>  [9] \"HALLMARK_CHOLESTEROL_HOMEOSTASIS\" \"HALLMARK_COAGULATION\" hallmark <- format_pathways(hallmark) head(hallmark[[1]]) #> # A tibble: 6 × 2 #>   Pathway               Genes #>   <chr>                 <chr> #> 1 HALLMARK_ADIPOGENESIS ABCA1 #> 2 HALLMARK_ADIPOGENESIS ABCB8 #> 3 HALLMARK_ADIPOGENESIS ACAA2 #> 4 HALLMARK_ADIPOGENESIS ACADL #> 5 HALLMARK_ADIPOGENESIS ACADM #> 6 HALLMARK_ADIPOGENESIS ACADS"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"versatility-in-using-msigdbr","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"Versatility in using msigdbr","title":"Generating gene sets","text":"advantage using something like msigdbr versatility subsetting specific pathways, collection gene sets. example, wanted pathways related interferon, use grepl filter gs_names column: specify combination collections get Hallmark, KEGG, Reactome gene sets: Using something like makes easy pull large /relevant gene set lists direct use within SCPA.","code":"ifn_pathways <- msigdbr(\"Homo sapiens\") %>%   filter(grepl(\"interferon\", gs_name, ignore.case = T)) %>%   format_pathways() pathways <- c(\"hallmark\", \"kegg\", \"reactome\") hkr_sets <- msigdbr(\"Homo sapiens\") %>%   filter(grepl(paste(pathways, collapse = \"|\"), gs_name, ignore.case = T)) %>%   format_pathways()"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"using-a-gmt-file","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"2. Using a gmt file","title":"Generating gene sets","text":"SCPA built function read gmt files format properly. need specify filepath. can just use compare_pathways function","code":"pathways <- \"path/to/geneset/file.gmt\" scpa_out <- compare_pathways(samples = samples, pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"using-a-csv-file","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"3. Using a csv file","title":"Generating gene sets","text":"example, need create csv file, ’s done, ’s simple line code. gmt files, SCPA can directly read properly formatted csv gene set files – just need supply filepath","code":"pathways <- \"path/to/geneset/file.csv\" scpa_out <- compare_pathways(samples = samples, pathways = pathways)"},{"path":"jackbibby1.github.io/SCPA/articles/using_gene_sets.html","id":"how-to-create-the-csv-file","dir":"Articles","previous_headings":"Using gene sets in SCPA","what":"How to create the csv file","title":"Generating gene sets","text":"csv file needs formatted style classical gene set gmt file. pathway name column 1, genes pathway subsequent columns. generate something like , need download gmt file, open something like excel, delete second column containing url, save csv file. Using method means can manually create list gene sets ’re interested , ’re limited existing databases. file look something like :","code":""},{"path":"jackbibby1.github.io/SCPA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack Bibby. Author, maintainer.","code":""},{"path":"jackbibby1.github.io/SCPA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bibby J (2022). SCPA: Single Cell Pathway Analysis. jackbibby1.github.io/SCPA, https://github.com/jackbibby1/SCPA/.","code":"@Manual{,   title = {SCPA: Single Cell Pathway Analysis},   author = {Jack Bibby},   year = {2022},   note = {jackbibby1.github.io/SCPA, https://github.com/jackbibby1/SCPA/}, }"},{"path":[]},{"path":"jackbibby1.github.io/SCPA/index.html","id":"about-scpa","dir":"","previous_headings":"","what":"About SCPA","title":"Single Cell Pathway Analysis","text":"SCPA method pathway analysis single cell RNA-seq data. ’s based novel approach pathway analysis defines pathway activity change multivariate distribution given pathway across conditions, rather enrichment representation genes. approach allows number benefits current methods, including: identify pathways show enrichment given population also identify pathways overall enrichment alterations multivariate distribution pathway. essentially get best worlds, pathways changes multivariate distribution overall enrichment still interestingly different pathways. can compare multiple conditions simultaneously e.g. compare across 3 time points, across multiple phases pseuodotime trajectory. means can assess pathway activity multiple stimulation times, across cell differentiation see stats behind SCPA, can see paper JASA see SCPA applied scRNA-seq dataset, can see paper bioRxiv ","code":""},{"path":"jackbibby1.github.io/SCPA/index.html","id":"1-installation","dir":"","previous_headings":"","what":"1. Installation","title":"Single Cell Pathway Analysis","text":"can install SCPA running:","code":"# install.packages(\"devtools\") devtools::install_github(\"jackbibby1/SCPA\")"},{"path":"jackbibby1.github.io/SCPA/index.html","id":"2-tutorials","dir":"","previous_headings":"","what":"2. Tutorials","title":"Single Cell Pathway Analysis","text":"tutorials use SCPA, click link","code":""},{"path":"jackbibby1.github.io/SCPA/index.html","id":"3-issues","dir":"","previous_headings":"","what":"3. Issues","title":"Single Cell Pathway Analysis","text":"report issues submit comments please use: https://github.com/jackbibby1/SCPA/issues","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SCPA to compare gene sets — compare_pathways","title":"Use SCPA to compare gene sets — compare_pathways","text":"function takes input samples pathways compare gene sets different conditions.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SCPA to compare gene sets — compare_pathways","text":"","code":"compare_pathways(   samples,   pathways,   downsample = 500,   min_genes = 15,   max_genes = 500 )"},{"path":"jackbibby1.github.io/SCPA/reference/compare_pathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SCPA to compare gene sets — compare_pathways","text":"samples List samples, supplied expression matrix pathways List pathways genes downsample Option downsample cell numbers. Default 500 min_genes Gene sets fewer number genes excluded max_genes Gene sets number genes excluded","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_pathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SCPA to compare gene sets — compare_pathways","text":"Statistical results SCPA analysis. two samples provided, enrichment score also calculated.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_pathways.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SCPA to compare gene sets — compare_pathways","text":"","code":"if (FALSE) { scpa_result <- compare_pathways(      list(sample1, sample2, sample3),      pathways = pathways) }"},{"path":"jackbibby1.github.io/SCPA/reference/compare_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SCPA to compare pathways within a Seurat object — compare_seurat","title":"Use SCPA to compare pathways within a Seurat object — compare_seurat","text":"function takes Seurat object input, compares gene sets specified conditions populations.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SCPA to compare pathways within a Seurat object — compare_seurat","text":"","code":"compare_seurat(   seurat_object,   group1 = NULL,   group1_population = NULL,   group2 = NULL,   group2_population = NULL,   pathways,   downsample = 500 )"},{"path":"jackbibby1.github.io/SCPA/reference/compare_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SCPA to compare pathways within a Seurat object — compare_seurat","text":"seurat_object Seurat object defined clusters group1 First comparison group defined column names Seurat object e.g. cell_type group1_population Population within group1 compare e.g. t_cell group2 Second comparison group defined column names Seurat object e.g. hour group2_population Population within group2 compare e.g. 24 pathways List pathways genes downsample Option downsample cell numbers. Default 500","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SCPA to compare pathways within a Seurat object — compare_seurat","text":"Statistical results multicross tool. two samples provided, enrichment score also calculated.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/compare_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SCPA to compare pathways within a Seurat object — compare_seurat","text":"","code":"if (FALSE) { scpa_out <- compare_seurat(      list(sample1, sample2, sample3),      pathways = pathways) }"},{"path":"jackbibby1.github.io/SCPA/reference/format_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the output of msigdbr to use with SCPA — format_pathways","title":"Format the output of msigdbr to use with SCPA — format_pathways","text":"function takes output msigdbr formats pathways something can used within SCPA","code":""},{"path":"jackbibby1.github.io/SCPA/reference/format_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the output of msigdbr to use with SCPA — format_pathways","text":"","code":"format_pathways(msigdbr_output)"},{"path":"jackbibby1.github.io/SCPA/reference/format_pathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the output of msigdbr to use with SCPA — format_pathways","text":"msigdbr_output output msigdbr","code":""},{"path":"jackbibby1.github.io/SCPA/reference/format_pathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the output of msigdbr to use with SCPA — format_pathways","text":"list pathways corresponding genes","code":""},{"path":"jackbibby1.github.io/SCPA/reference/format_pathways.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the output of msigdbr to use with SCPA — format_pathways","text":"","code":"if (FALSE) { pathways <- format_pathways(      pathways ) }"},{"path":"jackbibby1.github.io/SCPA/reference/get_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert gene sets to filtered pathway list — get_paths","title":"Convert gene sets to filtered pathway list — get_paths","text":"function takes one two inputs: csv file pathway title first column subsequent columns contain genes pathway list pathway name contained first column genes pathway second column","code":""},{"path":"jackbibby1.github.io/SCPA/reference/get_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert gene sets to filtered pathway list — get_paths","text":"","code":"get_paths(pathway_filepath, min_genes = 15, max_genes = 500)"},{"path":"jackbibby1.github.io/SCPA/reference/get_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert gene sets to filtered pathway list — get_paths","text":"pathway_filepath filepath csv file, list object min_genes Minimum number genes required pathway inclusion max_genes Maximum number genes required pathway inclusion","code":""},{"path":"jackbibby1.github.io/SCPA/reference/get_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert gene sets to filtered pathway list — get_paths","text":"list pathways corresponding genes","code":""},{"path":"jackbibby1.github.io/SCPA/reference/get_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert gene sets to filtered pathway list — get_paths","text":"","code":"if (FALSE) { pathways <- get_paths(      \"Documents/gene_list.csv\" ) }"},{"path":"jackbibby1.github.io/SCPA/reference/pathway_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pathway matrices from gene sets — pathway_matrices","title":"Create pathway matrices from gene sets — pathway_matrices","text":"function takes matrix pathway list input creates expression matrices pathway. resulting output list expression matrices pathway","code":""},{"path":"jackbibby1.github.io/SCPA/reference/pathway_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pathway matrices from gene sets — pathway_matrices","text":"","code":"pathway_matrices(samples, pathways, sample_names = NULL, pathway_names = NULL)"},{"path":"jackbibby1.github.io/SCPA/reference/pathway_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pathway matrices from gene sets — pathway_matrices","text":"samples List containing expression file samples pathways List pathways create pathway specific matrices. can use get_paths function create list using csv file generated gmt file. sample_names Names samples used output pathway_names Names pathways used output","code":""},{"path":"jackbibby1.github.io/SCPA/reference/plot_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the rank of specific pathways from SCPA output — plot_rank","title":"Plot the rank of specific pathways from SCPA output — plot_rank","text":"function takes output SCPA plots rank user defined pathway.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/plot_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the rank of specific pathways from SCPA output — plot_rank","text":"","code":"plot_rank(   scpa_out,   pathway,   population_name = \"qval\",   base_point_size = 2,   base_point_color = \"gray70\",   highlight_point_size = 3,   highlight_point_color = \"cornflowerblue\",   label_pathway = T,   label_size = 4 )"},{"path":"jackbibby1.github.io/SCPA/reference/plot_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the rank of specific pathways from SCPA output — plot_rank","text":"scpa_out Data frame containing Pathways qvals generated compare_pathways pathway Chosen pathway pathways plot rank . can specific e.g. HALLMARK_GLYCOLYSIS plot specific result, generic e.g. glycolysis plot glycolysis pathways population_name Column name population plot, one population present data frame base_point_size Size base points plot graph base_point_color Color base points plot graph highlight_point_size Size highlighted points plot graph highlight_point_color Color highlighted points plot graph label_pathway selected pathway labelled? label_size Text size pathway label","code":""},{"path":"jackbibby1.github.io/SCPA/reference/plot_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the rank of specific pathways from SCPA output — plot_rank","text":"list pathways corresponding genes","code":""},{"path":"jackbibby1.github.io/SCPA/reference/plot_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the rank of specific pathways from SCPA output — plot_rank","text":"","code":"if (FALSE) { plot_rank(      scpa_out = scpa_result,      pathway = \"interferon\",      population_name = cd4_qval, ) }"},{"path":"jackbibby1.github.io/SCPA/reference/random_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly sample cells (columns) — random_cells","title":"Randomly sample cells (columns) — random_cells","text":"function takes matrix data frame input randomly samples columns","code":""},{"path":"jackbibby1.github.io/SCPA/reference/random_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly sample cells (columns) — random_cells","text":"","code":"random_cells(df, n)"},{"path":"jackbibby1.github.io/SCPA/reference/random_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly sample cells (columns) — random_cells","text":"df Data frame matrix. n Number cells sample.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/random_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly sample cells (columns) — random_cells","text":"Matrix data frame n randomly sampled rows","code":""},{"path":"jackbibby1.github.io/SCPA/reference/random_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly sample cells (columns) — random_cells","text":"","code":"if (FALSE) { df <- matrix(1:1000, 500, 20) sub_df <- random_cells(     df = df,     n = 20 ) }"},{"path":"jackbibby1.github.io/SCPA/reference/seurat_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Normalised Data From Seurat — seurat_extract","title":"Extract Normalised Data From Seurat — seurat_extract","text":"function takes Seurat object input, returns matrix based subsetting parameters. Either none, one, two metadata features can selected given input.","code":""},{"path":"jackbibby1.github.io/SCPA/reference/seurat_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Normalised Data From Seurat — seurat_extract","text":"","code":"seurat_extract(   seu_obj,   meta1 = NULL,   value_meta1 = NULL,   meta2 = NULL,   value_meta2 = NULL,   pseudocount = 0.001 )"},{"path":"jackbibby1.github.io/SCPA/reference/seurat_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Normalised Data From Seurat — seurat_extract","text":"seu_obj Seurat object containing normalised counts stored seu_obj@assays$RNA@data meta1 Metadata name subset value_meta1 Value select within meta1 function meta2 Metadata name subset value_meta2 Value select within meta2 function pseudocount Pseudocount add data. Defaults 0.001","code":""},{"path":"jackbibby1.github.io/SCPA/reference/seurat_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Normalised Data From Seurat — seurat_extract","text":"Matrix containing count values selected populations","code":""},{"path":"jackbibby1.github.io/SCPA/reference/seurat_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Normalised Data From Seurat — seurat_extract","text":"","code":"if (FALSE) { cd4 <- seurat_extract(    Seurat_Object,    meta1 = \"Hour\",    value_meta1 = 12,    meta2 = \"Cell_Type\",    value_meta2 = \"CD4\" ) }"}]
